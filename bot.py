import os
import sys
import requests
import asyncio
import threading
import time  # –ü–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤–≤–µ—Ä—Ö
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from telegram.error import Conflict, RetryAfter, TelegramError
from datetime import datetime

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['TG_TOKEN', 'PORT']  # –î–æ–±–∞–≤–ª–µ–Ω PORT
    missing = [var for var in required_vars if var not in os.environ]
    
    if missing:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞ Render.com:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Dashboard -> –≤–∞—à —Å–µ—Ä–≤–∏—Å")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É 'Environment'")
        print("3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print("   - Key: TG_TOKEN")
        print("   - Value: –≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
        print("   - Key: PORT")
        print("   - Value: 10000")
        print("4. –ù–∞–∂–º–∏—Ç–µ 'Save Changes'")
        print("5. –í —Ä–∞–∑–¥–µ–ª–µ 'Advanced' –¥–æ–±–∞–≤—å—Ç–µ:")
        print("   - Health Check Path: /health")
        print("6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å")
        sys.exit(1)

    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
check_environment()

TELEGRAM_TOKEN = os.environ['TG_TOKEN']
PORT = int(os.environ['PORT'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
NBRB_API_URL = "https://api.nbrb.by/exrates/rates/USD?parammode=2"

# Health check —Å–µ—Ä–≤–µ—Ä
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'OK')
        else:
            self.send_response(404)
            self.end_headers()

def run_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    server = HTTPServer(('0.0.0.0', PORT), HealthHandler)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º PORT
    print(f"ü©∫ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    server.serve_forever()

def get_currency_rate():
    try:
        response = requests.get(NBRB_API_URL, timeout=10)
        response.raise_for_status()
        data = response.json()
        rate = data['Cur_OfficialRate']
        date_str = datetime.now().strftime("%d.%m.%Y %H:%M")
        return f"üá∫üá∏ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –ù–ë–†–ë\n–Ω–∞ {date_str}:\n\n1 USD = {rate} BYN"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}"

async def start_command(update: Update, context: CallbackContext):
    user = update.effective_user
    welcome_msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –æ—Ç –ù–∞—Ü–±–∞–Ω–∫–∞ –†–ë.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /rate —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å"
    )
    await safe_send_message(context, update.effective_chat.id, welcome_msg)
    await send_rate(update, context)

async def rate_command(update: Update, context: CallbackContext):
    await send_rate(update, context)

async def send_rate(update: Update, context: CallbackContext):
    rate_msg = get_currency_rate()
    await safe_send_message(context, update.effective_chat.id, rate_msg)

async def safe_send_message(context: CallbackContext, chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Telegram"""
    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    except RetryAfter as e:
        print(f"‚ö†Ô∏è Telegram API limit exceeded. Waiting {e.retry_after} seconds...")
        await asyncio.sleep(e.retry_after)
        await safe_send_message(context, chat_id, text)
    except TelegramError as e:
        print(f"‚ö†Ô∏è Telegram error: {e}")

def main():
    print("="*50)
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª—é—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print("="*50)
    
    # –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞
    health_thread = threading.Thread(target=run_health_server, daemon=True)
    health_thread.start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("rate", rate_command))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    run_bot(application)

def run_bot(application):
    try:
        print("üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        application.run_polling(
            drop_pending_updates=True,
            read_timeout=60,
            bootstrap_retries=3,
            allowed_updates=Update.ALL_TYPES
        )
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Conflict as e:
        print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫...")
        time.sleep(30)
        run_bot(application)
    except Exception as e:
        print(f"‚õëÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫...")
        time.sleep(15)
        run_bot(application)

if __name__ == "__main__":
    main()
