import os
import sys
import requests
import asyncio
import threading
import time
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
from telegram.error import Conflict, RetryAfter, TelegramError
from datetime import datetime
import pytz

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['TG_TOKEN', 'PORT']
    missing = [var for var in required_vars if var not in os.environ]
    
    if missing:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞ Render.com:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Dashboard -> –≤–∞—à —Å–µ—Ä–≤–∏—Å")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É 'Environment'")
        print("3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print("   - Key: TG_TOKEN")
        print("   - Value: –≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
        print("   - Key: PORT")
        print("   - Value: 10000")
        print("4. –ù–∞–∂–º–∏—Ç–µ 'Save Changes'")
        print("5. –í —Ä–∞–∑–¥–µ–ª–µ 'Advanced' –¥–æ–±–∞–≤—å—Ç–µ:")
        print("   - Health Check Path: /health")
        print("6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å")
        sys.exit(1)

    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
check_environment()

TELEGRAM_TOKEN = os.environ['TG_TOKEN']
PORT = int(os.environ['PORT'])
CURRENCY_API_URL = "https://api.nbrb.by/exrates/rates?periodicity=0"

# Health check —Å–µ—Ä–≤–µ—Ä
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'OK')
        else:
            self.send_response(404)
            self.end_headers()

def run_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    server = HTTPServer(('0.0.0.0', PORT), HealthHandler)
    print(f"ü©∫ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    server.serve_forever()

def get_minsk_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–∏–Ω—Å–∫–µ (UTC+3)"""
    minsk_tz = pytz.timezone('Europe/Minsk')
    return datetime.now(minsk_tz)

def format_currency_rate(currency_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    rates = {
        'USD': {'symbol': 'üá∫üá∏', 'name': '–î–æ–ª–ª–∞—Ä –°–®–ê', 'scale': 1},
        'EUR': {'symbol': 'üá™üá∫', 'name': '–ï–≤—Ä–æ', 'scale': 1},
        'RUB': {'symbol': 'üá∑üá∫', 'name': '–†–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π', 'scale': 100}
    }
    
    formatted = ""
    for currency in currency_data:
        code = currency['Cur_Abbreviation']
        if code in rates:
            rate = currency['Cur_OfficialRate']
            scale = currency['Cur_Scale']
            symbol = rates[code]['symbol']
            name = rates[code]['name']
            final_rate = (rate * rates[code]['scale']) / scale
            formatted += f"{symbol} {rates[code]['scale']} {name} = {final_rate:.4f} BYN\n"
    
    return formatted.strip()

def get_currency_rates():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ù–ë–†–ë"""
    try:
        response = requests.get(CURRENCY_API_URL, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        currencies = [item for item in data if item['Cur_Abbreviation'] in ['USD', 'EUR', 'RUB']]
        
        if not currencies or len(currencies) < 3:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º"
        
        minsk_time = get_minsk_time()
        date_str = minsk_time.strftime("%d.%m.%Y %H:%M (–ú–∏–Ω—Å–∫)")
        
        rates_text = format_currency_rate(currencies)
        return f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–†–ë\n–Ω–∞ {date_str}:\n\n{rates_text}"
    
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}"

async def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –ù–∞—Ü–±–∞–Ω–∫–∞ –†–ë.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    keyboard = [[InlineKeyboardButton("üí± –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã", callback_data='get_rates')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=welcome_msg,
        reply_markup=reply_markup
    )

async def rate_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate"""
    await send_rates(update, context)

async def send_rates(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
    rates_msg = get_currency_rates()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_rates')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=rates_msg,
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'get_rates' or query.data == 'refresh_rates':
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
        except TelegramError:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—Ç–∞—Ä–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
        await send_rates(update, context)
    
    elif query.data == 'about':
        about_msg = (
            "‚ÑπÔ∏è –ë–æ—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ù–ë–†–ë\n\n"
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:\n"
            "- –î–æ–ª–ª–∞—Ä–∞ –°–®–ê (USD)\n"
            "- –ï–≤—Ä–æ (EUR)\n"
            "- 100 –†–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π (RUB)\n\n"
            "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            "—Å —Å–∞–π—Ç–∞ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å"
        )
        await query.edit_message_text(text=about_msg)

async def safe_send_message(context: CallbackContext, chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Telegram"""
    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    except RetryAfter as e:
        print(f"‚ö†Ô∏è Telegram API limit exceeded. Waiting {e.retry_after} seconds...")
        await asyncio.sleep(e.retry_after)
        await safe_send_message(context, chat_id, text)
    except TelegramError as e:
        print(f"‚ö†Ô∏è Telegram error: {e}")

def main():
    print("="*50)
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª—é—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print("="*50)
    
    # –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞
    health_thread = threading.Thread(target=run_health_server, daemon=True)
    health_thread.start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("rate", rate_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    run_bot(application)

def run_bot(application):
    try:
        print("üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        application.run_polling(
            drop_pending_updates=True,
            read_timeout=60,
            bootstrap_retries=3,
            allowed_updates=Update.ALL_TYPES
        )
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Conflict as e:
        print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫...")
        time.sleep(30)
        run_bot(application)
    except Exception as e:
        print(f"‚õëÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫...")
        time.sleep(15)
        run_bot(application)

if __name__ == "__main__":
    main()
