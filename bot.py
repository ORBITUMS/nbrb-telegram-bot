import os
import sys
import requests
import asyncio
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from telegram.error import Conflict, RetryAfter
from datetime import datetime

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['TG_TOKEN']
    missing = [var for var in required_vars if var not in os.environ]
    
    if missing:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞ Render.com:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Dashboard -> –≤–∞—à —Å–µ—Ä–≤–∏—Å")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É 'Environment'")
        print("3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print("   - Key: TG_TOKEN")
        print("   - Value: –≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
        print("4. –ù–∞–∂–º–∏—Ç–µ 'Save Changes'")
        print("5. –í —Ä–∞–∑–¥–µ–ª–µ 'Advanced' –¥–æ–±–∞–≤—å—Ç–µ:")
        print("   - Health Check Path: /health")
        print("   - PORT: 10000")
        print("6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å")
        sys.exit(1)

    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
check_environment()

TELEGRAM_TOKEN = os.environ['TG_TOKEN']
NBRB_API_URL = "https://api.nbrb.by/exrates/rates/USD?parammode=2"

# Health check —Å–µ—Ä–≤–µ—Ä
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'OK')
        else:
            self.send_response(404)
            self.end_headers()

def run_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    server = HTTPServer(('0.0.0.0', 10000), HealthHandler)
    print(f"ü©∫ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000")
    print(f"üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: https://your-service-name.onrender.com/health")
    server.serve_forever()

def get_currency_rate():
    try:
        response = requests.get(NBRB_API_URL, timeout=10)
        response.raise_for_status()
        data = response.json()
        rate = data['Cur_OfficialRate']
        date_str = datetime.now().strftime("%d.%m.%Y %H:%M")
        return f"üá∫üá∏ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –ù–ë–†–ë\n–Ω–∞ {date_str}:\n\n1 USD = {rate} BYN"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}"

async def start_command(update: Update, context: CallbackContext):
    user = update.effective_user
    welcome_msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –æ—Ç –ù–∞—Ü–±–∞–Ω–∫–∞ –†–ë.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /rate —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_msg)
    await send_rate(update, context)

async def rate_command(update: Update, context: CallbackContext):
    await send_rate(update, context)

async def send_rate(update: Update, context: CallbackContext):
    rate_msg = get_currency_rate()
    await context.bot.send_message(chat_id=update.effective_chat.id, text=rate_msg)

async def reset_webhook():
    """–°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    async with Application.builder().token(TELEGRAM_TOKEN).build() as temp_app:
        await temp_app.bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")

def main():
    print("="*50)
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª—é—Ç–Ω–æ–≥–æ –±–æ—Ç–∞")
    print("="*50)
    
    # –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞
    health_thread = threading.Thread(target=run_health_server, daemon=True)
    health_thread.start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("rate", rate_command))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    run_bot(application)

def run_bot(application):
    try:
        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        asyncio.run(reset_webhook())
        
        print("üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        application.run_polling(
            drop_pending_updates=True,
            connect_timeout=60,
            read_timeout=60,
            bootstrap_retries=3
        )
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Conflict:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫...")
        time.sleep(30)
        run_bot(application)
    except Exception as e:
        print(f"‚õëÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {e}")
        time.sleep(15)
        run_bot(application)

if __name__ == "__main__":
    import time
    main()
